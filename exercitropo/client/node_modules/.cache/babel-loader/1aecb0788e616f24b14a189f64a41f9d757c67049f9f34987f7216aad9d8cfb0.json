{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loren\\\\Documents\\\\vscode\\\\Exercitropo\\\\exercitropo\\\\client\\\\src\\\\pages\\\\ExerciTropo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport '../styles/ExerciTropo.css';\n\n// Importa le immagini\nimport image0 from '../images/0.png';\nimport image1 from '../images/1.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExerciTropo = () => {\n  _s();\n  // Stato per tenere traccia dell'indice dell'immagine corrente\n  const [index, setIndex] = useState(0);\n  // Stato per memorizzare i messaggi della chat\n  const [chatMessages, setChatMessages] = useState([]);\n  // Stato per memorizzare l'input dell'utente\n  const [userInput, setUserInput] = useState('');\n  // Stato per gestire il caricamento\n  const [loading, setLoading] = useState(false);\n\n  // Inizializza la chat con un messaggio di benvenuto\n  const initializeChat = useCallback(() => {\n    setChatMessages([{\n      type: 'bot',\n      message: \"Piacere io sono un trainer metaforico. Il gioco consiste di vari livelli. In questa prima fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no.\"\n    }]);\n  }, []);\n\n  // Recupera la risposta del bot tramite una chiamata fetch\n  const fetchBotResponse = useCallback(async message => {\n    try {\n      const response = await fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          index\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: data.message\n      }]);\n    } catch (error) {\n      console.error('Error fetching bot response:', error);\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: \"Sorry, there was an error processing your request.\"\n      }]);\n    }\n  }, [index]);\n\n  // Gestisce il cambiamento dell'immagine e aggiorna la chat\n  const handleImageChange = async newIndex => {\n    setIndex(newIndex);\n    setChatMessages([]); // Pulisce i messaggi della chat\n\n    try {\n      // Determina l'endpoint dell'API in base al cambiamento dell'indice\n      const endpoint = newIndex >= index ? `/set_image?msg=${newIndex}` : `/set_again_image?msg=${newIndex}`;\n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      await response.text();\n\n      // Aggiungi un messaggio alla chat\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: \"In questa fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no.\"\n      }]);\n    } catch (error) {\n      console.error('Error changing image:', error);\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: \"Sorry, there was an error processing your request.\"\n      }]);\n    }\n  };\n\n  // Gestisce il clic sul pulsante \"Avanti\" per cambiare immagine\n  const nextImage = () => {\n    handleImageChange(index + 1);\n  };\n\n  // Gestisce il clic sul pulsante \"Indietro\" per tornare indietro\n  const goBackImage = () => {\n    if (index > 0) {\n      handleImageChange(index - 1);\n    }\n  };\n\n  // Recupera la risposta del bot in base all'input dell'utente\n  const getBotResponse = async () => {\n    const rawText = userInput.trim();\n    if (!rawText) return;\n    setChatMessages(prevMessages => [...prevMessages, {\n      type: 'user',\n      message: rawText\n    }]);\n    setUserInput('');\n    setLoading(true);\n    try {\n      await fetchBotResponse(rawText);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Gestisce il tasto \"Enter\" per inviare l'input dell'utente\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      getBotResponse();\n    }\n  };\n\n  // Inizializza la chat quando il componente viene montato\n  useEffect(() => {\n    initializeChat();\n  }, [initializeChat]);\n\n  // Costruisci il percorso dell'immagine in base all'indice\n  const getImageSrc = index => `/images/${index}.png`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"L'ExerciTropo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"subtitle\",\n      children: \"Questo \\xE8 un training metaforico\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bottone\",\n        onClick: goBackImage,\n        disabled: index === 0,\n        children: \"Indietro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bottone\",\n        onClick: nextImage,\n        children: \"Avanti\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"myImage\",\n        src: getImageSrc(index) // Usa la funzione per costruire il percorso dell'immagine\n        ,\n        alt: `immagine ${index}`,\n        style: {\n          width: '100%',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boxed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbox\",\n        children: chatMessages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: msg.type === 'bot' ? 'botText' : 'userText',\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"userInput\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"textInput\",\n          type: \"text\",\n          name: \"msg\",\n          placeholder: \"Message\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"loadingGif\",\n        src: \"/images/loading-4802_128.gif\",\n        alt: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(ExerciTropo, \"IBTvnax2+xIkmW6CixYo1u8/A5s=\");\n_c = ExerciTropo;\nexport default ExerciTropo;\nvar _c;\n$RefreshReg$(_c, \"ExerciTropo\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","image0","image1","jsxDEV","_jsxDEV","ExerciTropo","_s","index","setIndex","chatMessages","setChatMessages","userInput","setUserInput","loading","setLoading","initializeChat","type","message","fetchBotResponse","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","prevMessages","error","console","handleImageChange","newIndex","endpoint","text","nextImage","goBackImage","getBotResponse","rawText","trim","handleKeyPress","e","key","getImageSrc","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","id","src","alt","style","width","height","map","msg","idx","name","placeholder","value","onChange","target","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/loren/Documents/vscode/Exercitropo/exercitropo/client/src/pages/ExerciTropo.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport '../styles/ExerciTropo.css';\r\n\r\n// Importa le immagini\r\nimport image0 from '../images/0.png';\r\nimport image1 from '../images/1.png';\r\n\r\nconst ExerciTropo = () => {\r\n  // Stato per tenere traccia dell'indice dell'immagine corrente\r\n  const [index, setIndex] = useState(0);\r\n  // Stato per memorizzare i messaggi della chat\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  // Stato per memorizzare l'input dell'utente\r\n  const [userInput, setUserInput] = useState('');\r\n  // Stato per gestire il caricamento\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Inizializza la chat con un messaggio di benvenuto\r\n  const initializeChat = useCallback(() => {\r\n    setChatMessages([\r\n      {\r\n        type: 'bot',\r\n        message: \"Piacere io sono un trainer metaforico. Il gioco consiste di vari livelli. In questa prima fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no.\",\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  // Recupera la risposta del bot tramite una chiamata fetch\r\n  const fetchBotResponse = useCallback(async (message) => {\r\n    try {\r\n      const response = await fetch('/chatbot', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message, index }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: data.message },\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error fetching bot response:', error);\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: \"Sorry, there was an error processing your request.\" },\r\n      ]);\r\n    }\r\n  }, [index]);\r\n\r\n  // Gestisce il cambiamento dell'immagine e aggiorna la chat\r\n  const handleImageChange = async (newIndex) => {\r\n    setIndex(newIndex);\r\n    setChatMessages([]); // Pulisce i messaggi della chat\r\n\r\n    try {\r\n      // Determina l'endpoint dell'API in base al cambiamento dell'indice\r\n      const endpoint = newIndex >= index ? `/set_image?msg=${newIndex}` : `/set_again_image?msg=${newIndex}`;\r\n      const response = await fetch(endpoint);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      await response.text();\r\n\r\n      // Aggiungi un messaggio alla chat\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        {\r\n          type: 'bot',\r\n          message: \"In questa fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no.\",\r\n        },\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error changing image:', error);\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: \"Sorry, there was an error processing your request.\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // Gestisce il clic sul pulsante \"Avanti\" per cambiare immagine\r\n  const nextImage = () => {\r\n    handleImageChange(index + 1);\r\n  };\r\n\r\n  // Gestisce il clic sul pulsante \"Indietro\" per tornare indietro\r\n  const goBackImage = () => {\r\n    if (index > 0) {\r\n      handleImageChange(index - 1);\r\n    }\r\n  };\r\n\r\n  // Recupera la risposta del bot in base all'input dell'utente\r\n  const getBotResponse = async () => {\r\n    const rawText = userInput.trim();\r\n    if (!rawText) return;\r\n\r\n    setChatMessages(prevMessages => [...prevMessages, { type: 'user', message: rawText }]);\r\n    setUserInput('');\r\n    setLoading(true);\r\n\r\n    try {\r\n      await fetchBotResponse(rawText);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Gestisce il tasto \"Enter\" per inviare l'input dell'utente\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      getBotResponse();\r\n    }\r\n  };\r\n\r\n  // Inizializza la chat quando il componente viene montato\r\n  useEffect(() => {\r\n    initializeChat();\r\n  }, [initializeChat]);\r\n\r\n  // Costruisci il percorso dell'immagine in base all'indice\r\n  const getImageSrc = (index) => `/images/${index}.png`;\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">L'ExerciTropo</h1>\r\n      <h4 className=\"subtitle\">Questo è un training metaforico</h4>\r\n      <div className=\"button-container\">\r\n        {/* Pulsante per tornare indietro tra le immagini */}\r\n        <button className=\"bottone\" onClick={goBackImage} disabled={index === 0}>Indietro</button>\r\n        {/* Pulsante per andare avanti tra le immagini */}\r\n        <button className=\"bottone\" onClick={nextImage}>Avanti</button>\r\n      </div>\r\n      <div className=\"image-container\">\r\n        {/* Immagine corrente basata sull'indice */}\r\n        <img\r\n          id=\"myImage\"\r\n          src={getImageSrc(index)} // Usa la funzione per costruire il percorso dell'immagine\r\n          alt={`immagine ${index}`}\r\n          style={{ width: '100%', height: 'auto' }}\r\n        />\r\n      </div>\r\n      <div className=\"boxed\">\r\n        <div id=\"chatbox\">\r\n          {/* Visualizza i messaggi della chat */}\r\n          {chatMessages.map((msg, idx) => (\r\n            <p key={idx} className={msg.type === 'bot' ? 'botText' : 'userText'}>\r\n              <span>{msg.message}</span>\r\n            </p>\r\n          ))}\r\n        </div>\r\n        <div id=\"userInput\">\r\n          {/* Input dell'utente */}\r\n          <input\r\n            id=\"textInput\"\r\n            type=\"text\"\r\n            name=\"msg\"\r\n            placeholder=\"Message\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n        {/* Mostra GIF di caricamento se in corso */}\r\n        {loading && <img id=\"loadingGif\" src=\"/images/loading-4802_128.gif\" alt=\"Loading...\" />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExerciTropo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}