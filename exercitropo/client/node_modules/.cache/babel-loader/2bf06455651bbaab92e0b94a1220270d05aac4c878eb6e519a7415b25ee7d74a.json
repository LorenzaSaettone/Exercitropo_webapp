{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loren\\\\Documents\\\\vscode\\\\Exercitropo\\\\exercitropo\\\\client\\\\src\\\\pages\\\\ExerciTropo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport '../styles/ExerciTropo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExerciTropo = () => {\n  _s();\n  const [index, setIndex] = useState(0);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Inizializza la chat con un messaggio di benvenuto\n  const initializeChat = useCallback(() => {\n    setChatMessages([{\n      type: 'bot',\n      message: \"Piacere io sono un trainer metaforico. Il gioco consiste di vari livelli. In questa prima fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no.\"\n    }]);\n  }, []);\n\n  // Recupera la risposta del bot\n  const fetchBotResponse = useCallback(async message => {\n    try {\n      const response = await fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          index\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: data.message\n      }]);\n    } catch (error) {\n      console.error('Error fetching bot response:', error);\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: \"Sorry, there was an error processing your request.\"\n      }]);\n    }\n  }, [index]);\n\n  // Gestisce il cambiamento dell'immagine\n  const handleImageChange = async newIndex => {\n    setIndex(newIndex);\n    setChatMessages([]); // Pulisce i messaggi della chat\n\n    try {\n      const endpoint = newIndex >= index ? `/set_image?msg=${newIndex}` : `/set_again_image?msg=${newIndex}`;\n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      await response.text();\n\n      // Aggiungi un messaggio alla chat\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: \"In questa fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no.\"\n      }]);\n    } catch (error) {\n      console.error('Error changing image:', error);\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: \"Sorry, there was an error processing your request.\"\n      }]);\n    }\n  };\n\n  // Gestisce il clic sul pulsante \"Avanti\"\n  const nextImage = () => {\n    handleImageChange(index + 1);\n  };\n\n  // Gestisce il clic sul pulsante \"Indietro\"\n  const goBackImage = () => {\n    if (index > 0) {\n      handleImageChange(index - 1);\n    }\n  };\n\n  // Recupera la risposta del bot in base all'input dell'utente\n  const getBotResponse = async () => {\n    const rawText = userInput.trim();\n    if (!rawText) return;\n    setChatMessages(prevMessages => [...prevMessages, {\n      type: 'user',\n      message: rawText\n    }]);\n    setUserInput('');\n    setLoading(true);\n    try {\n      await fetchBotResponse(rawText);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Gestisce il tasto \"Enter\" per inviare l'input dell'utente\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      getBotResponse();\n    }\n  };\n  useEffect(() => {\n    initializeChat();\n  }, [initializeChat]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"L'ExerciTropo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"subtitle\",\n      children: \"Questo \\xE8 un training metaforico\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bottone\",\n        onClick: goBackImage,\n        disabled: index === 0,\n        children: \"Indietro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bottone\",\n        onClick: nextImage,\n        children: \"Avanti\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"myImage\",\n        src: `/images/${index}.png` // Percorso relativo alla cartella public\n        ,\n        alt: `immagine ${index}`,\n        style: {\n          width: '100%',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boxed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbox\",\n        children: chatMessages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: msg.type === 'bot' ? 'botText' : 'userText',\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"userInput\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"textInput\",\n          type: \"text\",\n          name: \"msg\",\n          placeholder: \"Message\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"loadingGif\",\n        src: \"/images/loading-4802_128.gif\",\n        alt: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(ExerciTropo, \"IBTvnax2+xIkmW6CixYo1u8/A5s=\");\n_c = ExerciTropo;\nexport default ExerciTropo;\nvar _c;\n$RefreshReg$(_c, \"ExerciTropo\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","ExerciTropo","_s","index","setIndex","chatMessages","setChatMessages","userInput","setUserInput","loading","setLoading","initializeChat","type","message","fetchBotResponse","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","prevMessages","error","console","handleImageChange","newIndex","endpoint","text","nextImage","goBackImage","getBotResponse","rawText","trim","handleKeyPress","e","key","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","id","src","alt","style","width","height","map","msg","idx","name","placeholder","value","onChange","target","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/loren/Documents/vscode/Exercitropo/exercitropo/client/src/pages/ExerciTropo.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport '../styles/ExerciTropo.css';\r\n\r\nconst ExerciTropo = () => {\r\n  const [index, setIndex] = useState(0);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Inizializza la chat con un messaggio di benvenuto\r\n  const initializeChat = useCallback(() => {\r\n    setChatMessages([\r\n      {\r\n        type: 'bot',\r\n        message: \"Piacere io sono un trainer metaforico. Il gioco consiste di vari livelli. In questa prima fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no.\",\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  // Recupera la risposta del bot\r\n  const fetchBotResponse = useCallback(async (message) => {\r\n    try {\r\n      const response = await fetch('/chatbot', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message, index }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: data.message },\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error fetching bot response:', error);\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: \"Sorry, there was an error processing your request.\" },\r\n      ]);\r\n    }\r\n  }, [index]);\r\n\r\n  // Gestisce il cambiamento dell'immagine\r\n  const handleImageChange = async (newIndex) => {\r\n    setIndex(newIndex);\r\n    setChatMessages([]); // Pulisce i messaggi della chat\r\n\r\n    try {\r\n      const endpoint = newIndex >= index ? `/set_image?msg=${newIndex}` : `/set_again_image?msg=${newIndex}`;\r\n      const response = await fetch(endpoint);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      await response.text();\r\n\r\n      // Aggiungi un messaggio alla chat\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        {\r\n          type: 'bot',\r\n          message: \"In questa fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no.\",\r\n        },\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error changing image:', error);\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: \"Sorry, there was an error processing your request.\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // Gestisce il clic sul pulsante \"Avanti\"\r\n  const nextImage = () => {\r\n    handleImageChange(index + 1);\r\n  };\r\n\r\n  // Gestisce il clic sul pulsante \"Indietro\"\r\n  const goBackImage = () => {\r\n    if (index > 0) {\r\n      handleImageChange(index - 1);\r\n    }\r\n  };\r\n\r\n  // Recupera la risposta del bot in base all'input dell'utente\r\n  const getBotResponse = async () => {\r\n    const rawText = userInput.trim();\r\n    if (!rawText) return;\r\n\r\n    setChatMessages(prevMessages => [...prevMessages, { type: 'user', message: rawText }]);\r\n    setUserInput('');\r\n    setLoading(true);\r\n\r\n    try {\r\n      await fetchBotResponse(rawText);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Gestisce il tasto \"Enter\" per inviare l'input dell'utente\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      getBotResponse();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    initializeChat();\r\n  }, [initializeChat]);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">L'ExerciTropo</h1>\r\n      <h4 className=\"subtitle\">Questo è un training metaforico</h4>\r\n      <div className=\"button-container\">\r\n        <button className=\"bottone\" onClick={goBackImage} disabled={index === 0}>Indietro</button>\r\n        <button className=\"bottone\" onClick={nextImage}>Avanti</button>\r\n      </div>\r\n      <div className=\"image-container\">\r\n        {/* Usa il percorso relativo alla cartella public */}\r\n        <img\r\n          id=\"myImage\"\r\n          src={`/images/${index}.png`} // Percorso relativo alla cartella public\r\n          alt={`immagine ${index}`}\r\n          style={{ width: '100%', height: 'auto' }}\r\n        />\r\n      </div>\r\n      <div className=\"boxed\">\r\n        <div id=\"chatbox\">\r\n          {chatMessages.map((msg, idx) => (\r\n            <p key={idx} className={msg.type === 'bot' ? 'botText' : 'userText'}>\r\n              <span>{msg.message}</span>\r\n            </p>\r\n          ))}\r\n        </div>\r\n        <div id=\"userInput\">\r\n          <input\r\n            id=\"textInput\"\r\n            type=\"text\"\r\n            name=\"msg\"\r\n            placeholder=\"Message\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n        {loading && <img id=\"loadingGif\" src=\"/images/loading-4802_128.gif\" alt=\"Loading...\" />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExerciTropo;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,MAAMe,cAAc,GAAGb,WAAW,CAAC,MAAM;IACvCQ,eAAe,CAAC,CACd;MACEM,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE;IACX,CAAC,CACF,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,gBAAgB,GAAGhB,WAAW,CAAC,MAAOe,OAAO,IAAK;IACtD,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAU,EAAE;QACvCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,OAAO;UAAEV;QAAM,CAAC;MACzC,CAAC,CAAC;MAEF,IAAI,CAACY,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCpB,eAAe,CAACqB,YAAY,IAAI,CAC9B,GAAGA,YAAY,EACf;QAAEf,IAAI,EAAE,KAAK;QAAEC,OAAO,EAAEY,IAAI,CAACZ;MAAQ,CAAC,CACvC,CAAC;IACJ,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDtB,eAAe,CAACqB,YAAY,IAAI,CAC9B,GAAGA,YAAY,EACf;QAAEf,IAAI,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAqD,CAAC,CAC/E,CAAC;IACJ;EACF,CAAC,EAAE,CAACV,KAAK,CAAC,CAAC;;EAEX;EACA,MAAM2B,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;IAC5C3B,QAAQ,CAAC2B,QAAQ,CAAC;IAClBzB,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;;IAErB,IAAI;MACF,MAAM0B,QAAQ,GAAGD,QAAQ,IAAI5B,KAAK,GAAG,kBAAkB4B,QAAQ,EAAE,GAAG,wBAAwBA,QAAQ,EAAE;MACtG,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAACgB,QAAQ,CAAC;MACtC,IAAI,CAACjB,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMT,QAAQ,CAACkB,IAAI,CAAC,CAAC;;MAErB;MACA3B,eAAe,CAACqB,YAAY,IAAI,CAC9B,GAAGA,YAAY,EACf;QACEf,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE;MACX,CAAC,CACF,CAAC;IACJ,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CtB,eAAe,CAACqB,YAAY,IAAI,CAC9B,GAAGA,YAAY,EACf;QAAEf,IAAI,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAqD,CAAC,CAC/E,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMqB,SAAS,GAAGA,CAAA,KAAM;IACtBJ,iBAAiB,CAAC3B,KAAK,GAAG,CAAC,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMgC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIhC,KAAK,GAAG,CAAC,EAAE;MACb2B,iBAAiB,CAAC3B,KAAK,GAAG,CAAC,CAAC;IAC9B;EACF,CAAC;;EAED;EACA,MAAMiC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,OAAO,GAAG9B,SAAS,CAAC+B,IAAI,CAAC,CAAC;IAChC,IAAI,CAACD,OAAO,EAAE;IAEd/B,eAAe,CAACqB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;MAAEf,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEwB;IAAQ,CAAC,CAAC,CAAC;IACtF7B,YAAY,CAAC,EAAE,CAAC;IAChBE,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF,MAAMI,gBAAgB,CAACuB,OAAO,CAAC;IACjC,CAAC,SAAS;MACR3B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM6B,cAAc,GAAIC,CAAC,IAAK;IAC5B,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MACrBL,cAAc,CAAC,CAAC;IAClB;EACF,CAAC;EAEDvC,SAAS,CAAC,MAAM;IACdc,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,oBACEX,OAAA;IAAA0C,QAAA,gBACE1C,OAAA;MAAI2C,SAAS,EAAC,OAAO;MAAAD,QAAA,EAAC;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxC/C,OAAA;MAAI2C,SAAS,EAAC,UAAU;MAAAD,QAAA,EAAC;IAA+B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7D/C,OAAA;MAAK2C,SAAS,EAAC,kBAAkB;MAAAD,QAAA,gBAC/B1C,OAAA;QAAQ2C,SAAS,EAAC,SAAS;QAACK,OAAO,EAAEb,WAAY;QAACc,QAAQ,EAAE9C,KAAK,KAAK,CAAE;QAAAuC,QAAA,EAAC;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1F/C,OAAA;QAAQ2C,SAAS,EAAC,SAAS;QAACK,OAAO,EAAEd,SAAU;QAAAQ,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC,eACN/C,OAAA;MAAK2C,SAAS,EAAC,iBAAiB;MAAAD,QAAA,eAE9B1C,OAAA;QACEkD,EAAE,EAAC,SAAS;QACZC,GAAG,EAAE,WAAWhD,KAAK,MAAO,CAAC;QAAA;QAC7BiD,GAAG,EAAE,YAAYjD,KAAK,EAAG;QACzBkD,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN/C,OAAA;MAAK2C,SAAS,EAAC,OAAO;MAAAD,QAAA,gBACpB1C,OAAA;QAAKkD,EAAE,EAAC,SAAS;QAAAR,QAAA,EACdrC,YAAY,CAACmD,GAAG,CAAC,CAACC,GAAG,EAAEC,GAAG,kBACzB1D,OAAA;UAAa2C,SAAS,EAAEc,GAAG,CAAC7C,IAAI,KAAK,KAAK,GAAG,SAAS,GAAG,UAAW;UAAA8B,QAAA,eAClE1C,OAAA;YAAA0C,QAAA,EAAOe,GAAG,CAAC5C;UAAO;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO;QAAC,GADpBW,GAAG;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAER,CACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN/C,OAAA;QAAKkD,EAAE,EAAC,WAAW;QAAAR,QAAA,eACjB1C,OAAA;UACEkD,EAAE,EAAC,WAAW;UACdtC,IAAI,EAAC,MAAM;UACX+C,IAAI,EAAC,KAAK;UACVC,WAAW,EAAC,SAAS;UACrBC,KAAK,EAAEtD,SAAU;UACjBuD,QAAQ,EAAGtB,CAAC,IAAKhC,YAAY,CAACgC,CAAC,CAACuB,MAAM,CAACF,KAAK,CAAE;UAC9CG,UAAU,EAAEzB;QAAe;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EACLtC,OAAO,iBAAIT,OAAA;QAAKkD,EAAE,EAAC,YAAY;QAACC,GAAG,EAAC,8BAA8B;QAACC,GAAG,EAAC;MAAY;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC7C,EAAA,CA1JID,WAAW;AAAAgE,EAAA,GAAXhE,WAAW;AA4JjB,eAAeA,WAAW;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}