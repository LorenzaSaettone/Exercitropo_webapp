{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loren\\\\Documents\\\\vscode\\\\Exercitropo\\\\exercitropo\\\\client\\\\src\\\\pages\\\\ExerciTropo.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/ExerciTropo.css';\n\n// Funzione per importare immagini dinamicamente\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getImagePath = index => {\n  try {\n    return require(`../images/${index}.png`).default;\n  } catch (err) {\n    console.error('Error loading image:', err);\n    // Se non vuoi gestire un'immagine di fallback, puoi semplicemente restituire null\n    return null;\n  }\n};\nconst ExerciTropo = () => {\n  _s();\n  const [index, setIndex] = useState(0);\n  const [chatMessages, setChatMessages] = useState([{\n    type: 'bot',\n    message: \"Piacere io sono un trainer metaforico. Il gioco consiste di vari livelli. In questa prima fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no\"\n  }]);\n  const [userInput, setUserInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fetchBotResponse = async message => {\n    try {\n      const response = await fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          index\n        })\n      });\n      const data = await response.json();\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: data.message\n      }]);\n    } catch (error) {\n      console.error('Error fetching bot response:', error);\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: \"Sorry, there was an error processing your request.\"\n      }]);\n    }\n  };\n  const nextImage = async () => {\n    setIndex(prevIndex => prevIndex + 1);\n    setChatMessages([]);\n    try {\n      await fetch(`/set_image?msg=${index + 1}`);\n      fetchBotResponse(\"In questa fase dovrai semplicemente descrivere le immagini...\");\n    } catch (error) {\n      console.error('Error fetching next image:', error);\n    }\n  };\n  const goBackImage = async () => {\n    if (index > 0) {\n      // Prevent going below index 0\n      setIndex(prevIndex => prevIndex - 1);\n      setChatMessages([]);\n      try {\n        await fetch(`/set_again_image?msg=${index - 1}`);\n        fetchBotResponse(\"In questa fase dovrai semplicemente descrivere le immagini...\");\n      } catch (error) {\n        console.error('Error fetching previous image:', error);\n      }\n    }\n  };\n  const getBotResponse = async () => {\n    const rawText = userInput;\n    setChatMessages([...chatMessages, {\n      type: 'user',\n      message: rawText\n    }]);\n    setUserInput('');\n    setLoading(true);\n    await fetchBotResponse(rawText);\n    setLoading(false);\n  };\n  const handleKeyPress = e => {\n    if (e.which === 13) {\n      getBotResponse();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"L'ExerciTropo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"subtitle\",\n      children: \"Questo \\xE8 un training metaforico\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bottone\",\n        onClick: goBackImage,\n        disabled: index === 0,\n        children: \"Indietro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bottone\",\n        onClick: nextImage,\n        children: \"Avanti\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"myImage\",\n        src: getImagePath(index) // Usa la funzione per caricare l'immagine\n        ,\n        alt: `immagine ${index}`,\n        style: {\n          width: '100%',\n          height: 'auto'\n        } // Opzionale: per adattare l'immagine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boxed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbox\",\n        children: chatMessages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: msg.type === 'bot' ? 'botText' : 'userText',\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"userInput\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"textInput\",\n          type: \"text\",\n          name: \"msg\",\n          placeholder: \"Message\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"loadingGif\",\n        src: \"/images/loading-4802_128.gif\",\n        alt: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(ExerciTropo, \"iwnjXzBz8kv7fJij67bvuvy/Wpk=\");\n_c = ExerciTropo;\nexport default ExerciTropo;\nvar _c;\n$RefreshReg$(_c, \"ExerciTropo\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","getImagePath","index","require","default","err","console","error","ExerciTropo","_s","setIndex","chatMessages","setChatMessages","type","message","userInput","setUserInput","loading","setLoading","fetchBotResponse","response","fetch","method","headers","body","JSON","stringify","data","json","prevMessages","nextImage","prevIndex","goBackImage","getBotResponse","rawText","handleKeyPress","e","which","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","id","src","alt","style","width","height","map","msg","idx","name","placeholder","value","onChange","target","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/loren/Documents/vscode/Exercitropo/exercitropo/client/src/pages/ExerciTropo.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/ExerciTropo.css';\r\n\r\n// Funzione per importare immagini dinamicamente\r\nconst getImagePath = (index) => {\r\n  try {\r\n    return require(`../images/${index}.png`).default;\r\n  } catch (err) {\r\n    console.error('Error loading image:', err);\r\n    // Se non vuoi gestire un'immagine di fallback, puoi semplicemente restituire null\r\n    return null;\r\n  }\r\n};\r\n\r\nconst ExerciTropo = () => {\r\n  const [index, setIndex] = useState(0);\r\n  const [chatMessages, setChatMessages] = useState([\r\n    {\r\n      type: 'bot',\r\n      message: \"Piacere io sono un trainer metaforico. Il gioco consiste di vari livelli. In questa prima fase dovrai semplicemente descrivere le immagini, dettagliando cosa vedi, elencando le varie caratteristiche dei soggetti rappresentati... Io per adesso non esprimerò alcun giudizio, confermandoti se hai fatto bene o no\",\r\n    },\r\n  ]);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchBotResponse = async (message) => {\r\n    try {\r\n      const response = await fetch('/chatbot', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message, index }),\r\n      });\r\n      const data = await response.json();\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: data.message },\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error fetching bot response:', error);\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: \"Sorry, there was an error processing your request.\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const nextImage = async () => {\r\n    setIndex(prevIndex => prevIndex + 1);\r\n    setChatMessages([]);\r\n    try {\r\n      await fetch(`/set_image?msg=${index + 1}`);\r\n      fetchBotResponse(\"In questa fase dovrai semplicemente descrivere le immagini...\");\r\n    } catch (error) {\r\n      console.error('Error fetching next image:', error);\r\n    }\r\n  };\r\n\r\n  const goBackImage = async () => {\r\n    if (index > 0) { // Prevent going below index 0\r\n      setIndex(prevIndex => prevIndex - 1);\r\n      setChatMessages([]);\r\n      try {\r\n        await fetch(`/set_again_image?msg=${index - 1}`);\r\n        fetchBotResponse(\"In questa fase dovrai semplicemente descrivere le immagini...\");\r\n      } catch (error) {\r\n        console.error('Error fetching previous image:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getBotResponse = async () => {\r\n    const rawText = userInput;\r\n    setChatMessages([...chatMessages, { type: 'user', message: rawText }]);\r\n    setUserInput('');\r\n    setLoading(true);\r\n    await fetchBotResponse(rawText);\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.which === 13) {\r\n      getBotResponse();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">L'ExerciTropo</h1>\r\n      <h4 className=\"subtitle\">Questo è un training metaforico</h4>\r\n      <div className=\"button-container\">\r\n        <button className=\"bottone\" onClick={goBackImage} disabled={index === 0}>Indietro</button>\r\n        <button className=\"bottone\" onClick={nextImage}>Avanti</button>\r\n      </div>\r\n      <div className=\"image-container\">\r\n        <img\r\n          id=\"myImage\"\r\n          src={getImagePath(index)} // Usa la funzione per caricare l'immagine\r\n          alt={`immagine ${index}`}\r\n          style={{ width: '100%', height: 'auto' }} // Opzionale: per adattare l'immagine\r\n        />\r\n      </div>\r\n      <div className=\"boxed\">\r\n        <div id=\"chatbox\">\r\n          {chatMessages.map((msg, idx) => (\r\n            <p key={idx} className={msg.type === 'bot' ? 'botText' : 'userText'}>\r\n              <span>{msg.message}</span>\r\n            </p>\r\n          ))}\r\n        </div>\r\n        <div id=\"userInput\">\r\n          <input\r\n            id=\"textInput\"\r\n            type=\"text\"\r\n            name=\"msg\"\r\n            placeholder=\"Message\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n        {loading && <img id=\"loadingGif\" src=\"/images/loading-4802_128.gif\" alt=\"Loading...\" />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExerciTropo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}