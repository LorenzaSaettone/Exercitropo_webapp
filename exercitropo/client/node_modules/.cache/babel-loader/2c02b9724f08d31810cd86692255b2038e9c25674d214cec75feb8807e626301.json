{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loren\\\\Documents\\\\vscode\\\\Chatbot\\\\Chatbot\\\\client\\\\src\\\\pages\\\\Task2.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task2 = () => {\n  _s();\n  const {\n    index\n  } = useParams();\n  const [imagePaths, setImagePaths] = useState({\n    giustaImagePath: '',\n    sbagliataImagePath: ''\n  });\n  const [randomOrder, setRandomOrder] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetch(`/task2`).then(response => response.json()).then(data => {\n      setImagePaths({\n        giustaImagePath: data.giustaImagePath,\n        sbagliataImagePath: data.sbagliataImagePath\n      });\n\n      // Generate a random order\n      const order = Math.random() < 0.5 ? ['giusta', 'sbagliata'] : ['sbagliata', 'giusta'];\n      setRandomOrder(order);\n    }).catch(error => {\n      console.error('Error fetching image paths:', error);\n    });\n  }, [index]);\n  const handleImageClick = isCorrect => {\n    if (isCorrect) {\n      navigate('/task3');\n    } else {\n      setErrorMessage('No è sbagliato, riprova');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Bisogna premere l'immagine che pi\\xF9 si alla metafora!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        gap: '10px',\n        marginTop: '20px'\n      },\n      children: [randomOrder[0] === 'giusta' && imagePaths.giustaImagePath && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePaths.giustaImagePath,\n        alt: `Giusta ${index}`,\n        style: {\n          width: '200px',\n          height: 'auto',\n          cursor: 'pointer'\n        },\n        onClick: () => handleImageClick(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), randomOrder[0] === 'sbagliata' && imagePaths.sbagliataImagePath && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePaths.sbagliataImagePath,\n        alt: `Sbagliata ${index}`,\n        style: {\n          width: '200px',\n          height: 'auto',\n          cursor: 'pointer'\n        },\n        onClick: () => handleImageClick(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), randomOrder[1] === 'giusta' && imagePaths.giustaImagePath && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePaths.giustaImagePath,\n        alt: `Giusta ${index}`,\n        style: {\n          width: '200px',\n          height: 'auto',\n          cursor: 'pointer'\n        },\n        onClick: () => handleImageClick(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), randomOrder[1] === 'sbagliata' && imagePaths.sbagliataImagePath && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePaths.sbagliataImagePath,\n        alt: `Sbagliata ${index}`,\n        style: {\n          width: '200px',\n          height: 'auto',\n          cursor: 'pointer'\n        },\n        onClick: () => handleImageClick(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red',\n        marginTop: '20px'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Task2, \"aoodtJ76wJq57TjKOaTOw+SSuvU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Task2;\nexport default Task2;\nvar _c;\n$RefreshReg$(_c, \"Task2\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","jsxDEV","_jsxDEV","Task2","_s","index","imagePaths","setImagePaths","giustaImagePath","sbagliataImagePath","randomOrder","setRandomOrder","errorMessage","setErrorMessage","navigate","fetch","then","response","json","data","order","Math","random","catch","error","console","handleImageClick","isCorrect","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","gap","src","alt","width","height","cursor","onClick","color","_c","$RefreshReg$"],"sources":["C:/Users/loren/Documents/vscode/Chatbot/Chatbot/client/src/pages/Task2.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nconst Task2 = () => {\r\n  const { index } = useParams();\r\n  const [imagePaths, setImagePaths] = useState({\r\n    giustaImagePath: '',\r\n    sbagliataImagePath: ''\r\n  });\r\n  const [randomOrder, setRandomOrder] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetch(`/task2`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setImagePaths({\r\n          giustaImagePath: data.giustaImagePath,\r\n          sbagliataImagePath: data.sbagliataImagePath\r\n        });\r\n        \r\n        // Generate a random order\r\n        const order = Math.random() < 0.5 ? ['giusta', 'sbagliata'] : ['sbagliata', 'giusta'];\r\n        setRandomOrder(order);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching image paths:', error);\r\n      });\r\n  }, [index]);\r\n\r\n  const handleImageClick = (isCorrect) => {\r\n    if (isCorrect) {\r\n      navigate('/task3');\r\n    } else {\r\n      setErrorMessage('No è sbagliato, riprova');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', marginTop: '20px' }}>\r\n      <h1>Task2</h1>\r\n      <p>Bisogna premere l'immagine che più si alla metafora!</p>\r\n      <div style={{ display: 'flex', justifyContent: 'center', gap: '10px', marginTop: '20px' }}>\r\n        {randomOrder[0] === 'giusta' && imagePaths.giustaImagePath && (\r\n          <img\r\n            src={imagePaths.giustaImagePath}\r\n            alt={`Giusta ${index}`}\r\n            style={{ width: '200px', height: 'auto', cursor: 'pointer' }}\r\n            onClick={() => handleImageClick(true)}\r\n          />\r\n        )}\r\n        {randomOrder[0] === 'sbagliata' && imagePaths.sbagliataImagePath && (\r\n          <img\r\n            src={imagePaths.sbagliataImagePath}\r\n            alt={`Sbagliata ${index}`}\r\n            style={{ width: '200px', height: 'auto', cursor: 'pointer' }}\r\n            onClick={() => handleImageClick(false)}\r\n          />\r\n        )}\r\n        {randomOrder[1] === 'giusta' && imagePaths.giustaImagePath && (\r\n          <img\r\n            src={imagePaths.giustaImagePath}\r\n            alt={`Giusta ${index}`}\r\n            style={{ width: '200px', height: 'auto', cursor: 'pointer' }}\r\n            onClick={() => handleImageClick(true)}\r\n          />\r\n        )}\r\n        {randomOrder[1] === 'sbagliata' && imagePaths.sbagliataImagePath && (\r\n          <img\r\n            src={imagePaths.sbagliataImagePath}\r\n            alt={`Sbagliata ${index}`}\r\n            style={{ width: '200px', height: 'auto', cursor: 'pointer' }}\r\n            onClick={() => handleImageClick(false)}\r\n          />\r\n        )}\r\n      </div>\r\n      {errorMessage && <p style={{ color: 'red', marginTop: '20px' }}>{errorMessage}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}