{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loren\\\\Documents\\\\vscode\\\\Exercitropo\\\\exercitropo\\\\client\\\\src\\\\pages\\\\ExerciTropo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport '../styles/ExerciTropo.css';\n\n// Import images\nimport image0 from '../images/0.png';\nimport image1 from '../images/1.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imageMap = {\n  0: image0,\n  1: image1\n};\nconst ExerciTropo = () => {\n  _s();\n  const [index, setIndex] = useState(0); // Current image index\n  const [chatMessages, setChatMessages] = useState([]); // Chat messages\n  const [userInput, setUserInput] = useState(''); // User input\n  const [loading, setLoading] = useState(false); // Loading state\n  const [count, setCount] = useState(0); // Message count\n\n  // Initialize chat with a welcome message\n  const initializeChat = useCallback(() => {\n    setChatMessages([{\n      type: 'bot',\n      message: \"Piacere io sono un trainer metaforico. Il gioco consiste di vari livelli. In questa prima fase dovrai semplicemente descrivere le immagini...\"\n    }]);\n  }, []);\n\n  // Fetch bot response\n  const fetchBotResponse = useCallback(async message => {\n    try {\n      const response = await fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          index\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: data.message\n      }]);\n      // Update count based on server response if needed\n      if (data.count !== undefined) {\n        setCount(data.count);\n      }\n    } catch (error) {\n      console.error('Error fetching bot response:', error);\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: \"Sorry, there was an error processing your request.\"\n      }]);\n    }\n  }, [index]);\n\n  // Handle image change\n  const handleImageChange = async newIndex => {\n    setIndex(newIndex);\n    setChatMessages([]); // Clear chat messages\n\n    try {\n      const endpoint = newIndex >= index ? `/set_image?msg=${newIndex}` : `/set_again_image?msg=${newIndex}`;\n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      await response.text();\n\n      // Reinitialize chat and fetch bot response\n      initializeChat();\n      fetchBotResponse(\"In questa fase dovrai semplicemente descrivere le immagini...\");\n    } catch (error) {\n      console.error('Error changing image:', error);\n      setChatMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        message: \"Sorry, there was an error processing your request.\"\n      }]);\n    }\n  };\n\n  // Handle button clicks\n  const nextImage = () => {\n    handleImageChange(index + 1);\n  };\n  const goBackImage = () => {\n    if (index > 0) {\n      handleImageChange(index - 1);\n    }\n  };\n\n  // Get bot response for user input\n  const getBotResponse = async () => {\n    const rawText = userInput.trim();\n    if (!rawText) return;\n    setChatMessages(prevMessages => [...prevMessages, {\n      type: 'user',\n      message: rawText\n    }]);\n    setUserInput('');\n    setLoading(true);\n    try {\n      await fetchBotResponse(rawText);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle key press for input\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      getBotResponse();\n    }\n  };\n  useEffect(() => {\n    initializeChat();\n  }, [initializeChat]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"L'ExerciTropo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"subtitle\",\n      children: \"Questo \\xE8 un training metaforico\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bottone\",\n        onClick: goBackImage,\n        disabled: index === 0,\n        children: \"Indietro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bottone\",\n        onClick: nextImage,\n        children: \"Avanti\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"myImage\",\n        src: imageMap[index],\n        alt: `immagine ${index}`,\n        style: {\n          width: '100%',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boxed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatbox\",\n        children: chatMessages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: msg.type === 'bot' ? 'botText' : 'userText',\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"userInput\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"textInput\",\n          type: \"text\",\n          name: \"msg\",\n          placeholder: \"Message\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"loadingGif\",\n        src: \"/images/loading-4802_128.gif\",\n        alt: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(ExerciTropo, \"25MvfM5TAx+sqMX09iKhBSt1t9M=\");\n_c = ExerciTropo;\nexport default ExerciTropo;\nvar _c;\n$RefreshReg$(_c, \"ExerciTropo\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","image0","image1","jsxDEV","_jsxDEV","imageMap","ExerciTropo","_s","index","setIndex","chatMessages","setChatMessages","userInput","setUserInput","loading","setLoading","count","setCount","initializeChat","type","message","fetchBotResponse","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","prevMessages","undefined","error","console","handleImageChange","newIndex","endpoint","text","nextImage","goBackImage","getBotResponse","rawText","trim","handleKeyPress","e","key","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","id","src","alt","style","width","height","map","msg","idx","name","placeholder","value","onChange","target","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/loren/Documents/vscode/Exercitropo/exercitropo/client/src/pages/ExerciTropo.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport '../styles/ExerciTropo.css';\r\n\r\n// Import images\r\nimport image0 from '../images/0.png';\r\nimport image1 from '../images/1.png';\r\n\r\nconst imageMap = {\r\n  0: image0,\r\n  1: image1,\r\n};\r\n\r\nconst ExerciTropo = () => {\r\n  const [index, setIndex] = useState(0); // Current image index\r\n  const [chatMessages, setChatMessages] = useState([]); // Chat messages\r\n  const [userInput, setUserInput] = useState(''); // User input\r\n  const [loading, setLoading] = useState(false); // Loading state\r\n  const [count, setCount] = useState(0); // Message count\r\n\r\n  // Initialize chat with a welcome message\r\n  const initializeChat = useCallback(() => {\r\n    setChatMessages([\r\n      {\r\n        type: 'bot',\r\n        message: \"Piacere io sono un trainer metaforico. Il gioco consiste di vari livelli. In questa prima fase dovrai semplicemente descrivere le immagini...\",\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  // Fetch bot response\r\n  const fetchBotResponse = useCallback(async (message) => {\r\n    try {\r\n      const response = await fetch('/chatbot', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message, index }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: data.message },\r\n      ]);\r\n      // Update count based on server response if needed\r\n      if (data.count !== undefined) {\r\n        setCount(data.count);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching bot response:', error);\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: \"Sorry, there was an error processing your request.\" },\r\n      ]);\r\n    }\r\n  }, [index]);\r\n\r\n  // Handle image change\r\n  const handleImageChange = async (newIndex) => {\r\n    setIndex(newIndex);\r\n    setChatMessages([]); // Clear chat messages\r\n\r\n    try {\r\n      const endpoint = newIndex >= index ? `/set_image?msg=${newIndex}` : `/set_again_image?msg=${newIndex}`;\r\n      const response = await fetch(endpoint);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      await response.text();\r\n\r\n      // Reinitialize chat and fetch bot response\r\n      initializeChat();\r\n      fetchBotResponse(\"In questa fase dovrai semplicemente descrivere le immagini...\");\r\n    } catch (error) {\r\n      console.error('Error changing image:', error);\r\n      setChatMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { type: 'bot', message: \"Sorry, there was an error processing your request.\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // Handle button clicks\r\n  const nextImage = () => {\r\n    handleImageChange(index + 1);\r\n  };\r\n\r\n  const goBackImage = () => {\r\n    if (index > 0) {\r\n      handleImageChange(index - 1);\r\n    }\r\n  };\r\n\r\n  // Get bot response for user input\r\n  const getBotResponse = async () => {\r\n    const rawText = userInput.trim();\r\n    if (!rawText) return;\r\n\r\n    setChatMessages(prevMessages => [...prevMessages, { type: 'user', message: rawText }]);\r\n    setUserInput('');\r\n    setLoading(true);\r\n\r\n    try {\r\n      await fetchBotResponse(rawText);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle key press for input\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      getBotResponse();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    initializeChat();\r\n  }, [initializeChat]);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">L'ExerciTropo</h1>\r\n      <h4 className=\"subtitle\">Questo è un training metaforico</h4>\r\n      <div className=\"button-container\">\r\n        <button className=\"bottone\" onClick={goBackImage} disabled={index === 0}>Indietro</button>\r\n        <button className=\"bottone\" onClick={nextImage}>Avanti</button>\r\n      </div>\r\n      <div className=\"image-container\">\r\n        <img\r\n          id=\"myImage\"\r\n          src={imageMap[index]}\r\n          alt={`immagine ${index}`}\r\n          style={{ width: '100%', height: 'auto' }}\r\n        />\r\n      </div>\r\n      <div className=\"boxed\">\r\n        <div id=\"chatbox\">\r\n          {chatMessages.map((msg, idx) => (\r\n            <p key={idx} className={msg.type === 'bot' ? 'botText' : 'userText'}>\r\n              <span>{msg.message}</span>\r\n            </p>\r\n          ))}\r\n        </div>\r\n        <div id=\"userInput\">\r\n          <input\r\n            id=\"textInput\"\r\n            type=\"text\"\r\n            name=\"msg\"\r\n            placeholder=\"Message\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n        </div>\r\n        {loading && <img id=\"loadingGif\" src=\"/images/loading-4802_128.gif\" alt=\"Loading...\" />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExerciTropo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}