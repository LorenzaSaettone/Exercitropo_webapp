{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loren\\\\Documents\\\\vscode\\\\Chatbot\\\\Chatbot\\\\client\\\\src\\\\pages\\\\Task1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Importing React and hooks from 'react'\nimport axios from 'axios'; // Importing axios for making HTTP requests\nimport storia from '../pages/storia.json'; // Importing the story JSON\nimport dizionari from '../pages/dizionari.json'; // Importing the dictionaries JSON\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task1 = () => {\n  _s();\n  const [inputMessage, setInputMessage] = useState(''); // State for the input message from the user\n  const [chatMessages, setChatMessages] = useState([]); // State for chat messages\n  const [showChat, setShowChat] = useState(false); // State to control the visibility of the chat\n  const [index, setIndex] = useState(1); // State for the current index of the story, initialized to 1\n  const [initialMessage, setInitialMessage] = useState(''); // State for the initial system message\n\n  // Function to handle sending messages\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() === '') return; // Prevent sending empty messages\n\n    // Add user message to chat\n    const newMessage = {\n      sender: 'user',\n      text: inputMessage.trim()\n    };\n    setChatMessages(prevMessages => [...prevMessages, newMessage]); // Update chat messages state with the new user message\n    setInputMessage(''); // Clear input field\n\n    try {\n      // Send message to backend and get bot response\n      const botResponse = await axios.post('/chatbot', {\n        message: inputMessage\n      }); // Send the message to the backend\n      const botMessage = {\n        sender: 'bot',\n        text: botResponse.data.message // Get the response from the backend\n      };\n      setChatMessages(prevMessages => [...prevMessages, botMessage]); // Update chat messages state with the new bot message\n    } catch (error) {\n      console.error('Error sending message to bot:', error); // Log any error\n    }\n  };\n\n  // Function to handle showing the chat\n  const handleShowChat = () => {\n    setShowChat(true); // Set the chat visibility state to true\n\n    // Construct dynamic keys for `storia` and `training`\n    const storiaKey = `storia_${index}`; // Key for accessing the current story\n    const metaforaKey = `metafora_${index}`; // Key for accessing the current metaphor\n\n    // Get the initial message from the dictionary\n    const storiaMessage = dizionari.training_1[storiaKey] ? dizionari.training_1[storiaKey][0] : ''; // Get the story message\n    const metaforaMessage = dizionari.training_1[metaforaKey] ? dizionari.training_1[metaforaKey][0] : ''; // Get the metaphor message\n\n    // Construct the initial system message\n    const initialSystemMessage = `Leggi bene la storia. Dopodiché dimmi per la metafora \"${metaforaMessage}\" quali sono le proprietà che accomunano entrambi i concetti e li rendono simili.`; // Create the initial system message\n\n    // Set the initial message state\n    setInitialMessage(initialSystemMessage); // Set the initial message state\n\n    const systemMessage = {\n      sender: 'system',\n      text: initialSystemMessage\n    };\n    setChatMessages(prevMessages => [...prevMessages, systemMessage]); // Add the system message to the chat messages state\n  };\n\n  // Effect to scroll to bottom of chat box on update\n  useEffect(() => {\n    const chatBox = document.getElementById('chat-box'); // Get the chat box element by ID\n    if (chatBox) {\n      chatBox.scrollTop = chatBox.scrollHeight; // Scroll to the bottom of the chat box\n    }\n  }, [chatMessages]); // Run this effect whenever chatMessages state updates\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"This is Task1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: dizionari.training_1[`storia_${index}`][0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), \" \", !showChat && /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        padding: '5px 10px',\n        cursor: 'pointer',\n        marginBottom: '10px'\n      },\n      onClick: handleShowChat,\n      children: \"Ho letto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), showChat && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-box\",\n        style: {\n          border: '1px solid #ccc',\n          padding: '10px',\n          minHeight: '200px',\n          marginBottom: '10px',\n          overflowY: 'auto'\n        },\n        children: chatMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '5px',\n            textAlign: message.sender === 'user' ? 'right' : 'left'\n          },\n          children: [message.sender === 'user' ? /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'blue'\n            },\n            children: \"You:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 19\n          }, this) : message.sender === 'bot' ? /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'green'\n            },\n            children: \"Bot:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'black'\n            },\n            children: \"System:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 19\n          }, this), ' ', message.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          style: {\n            flex: '1',\n            marginRight: '10px',\n            padding: '5px'\n          },\n          placeholder: \"Type your message...\",\n          value: inputMessage // Bind inputMessage state to textarea value\n          ,\n          onChange: e => setInputMessage(e.target.value) // Update inputMessage state on change\n          ,\n          onKeyDown: e => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault(); // Prevent default Enter key behavior (new line)\n              handleSendMessage(); // Call handleSendMessage function\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            padding: '5px 10px',\n            cursor: 'pointer'\n          },\n          onClick: handleSendMessage // Call handleSendMessage function on click\n          ,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Task1, \"Va2f6X+TrnR96e5HnOo6bfNRTL8=\");\n_c = Task1;\nexport default Task1; // Export the Task1 component as the default export\nvar _c;\n$RefreshReg$(_c, \"Task1\");","map":{"version":3,"names":["React","useState","useEffect","axios","storia","dizionari","jsxDEV","_jsxDEV","Task1","_s","inputMessage","setInputMessage","chatMessages","setChatMessages","showChat","setShowChat","index","setIndex","initialMessage","setInitialMessage","handleSendMessage","trim","newMessage","sender","text","prevMessages","botResponse","post","message","botMessage","data","error","console","handleShowChat","storiaKey","metaforaKey","storiaMessage","training_1","metaforaMessage","initialSystemMessage","systemMessage","chatBox","document","getElementById","scrollTop","scrollHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","cursor","marginBottom","onClick","id","border","minHeight","overflowY","map","textAlign","color","display","flex","marginRight","placeholder","value","onChange","e","target","onKeyDown","key","shiftKey","preventDefault","_c","$RefreshReg$"],"sources":["C:/Users/loren/Documents/vscode/Chatbot/Chatbot/client/src/pages/Task1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Importing React and hooks from 'react'\r\nimport axios from 'axios'; // Importing axios for making HTTP requests\r\nimport storia from '../pages/storia.json'; // Importing the story JSON\r\nimport dizionari from '../pages/dizionari.json'; // Importing the dictionaries JSON\r\n\r\nconst Task1 = () => {\r\n  const [inputMessage, setInputMessage] = useState(''); // State for the input message from the user\r\n  const [chatMessages, setChatMessages] = useState([]); // State for chat messages\r\n  const [showChat, setShowChat] = useState(false); // State to control the visibility of the chat\r\n  const [index, setIndex] = useState(1); // State for the current index of the story, initialized to 1\r\n  const [initialMessage, setInitialMessage] = useState(''); // State for the initial system message\r\n\r\n  // Function to handle sending messages\r\n  const handleSendMessage = async () => {\r\n    if (inputMessage.trim() === '') return; // Prevent sending empty messages\r\n\r\n    // Add user message to chat\r\n    const newMessage = {\r\n      sender: 'user',\r\n      text: inputMessage.trim(),\r\n    };\r\n    setChatMessages(prevMessages => [...prevMessages, newMessage]); // Update chat messages state with the new user message\r\n    setInputMessage(''); // Clear input field\r\n\r\n    try {\r\n      // Send message to backend and get bot response\r\n      const botResponse = await axios.post('/chatbot', { message: inputMessage }); // Send the message to the backend\r\n      const botMessage = {\r\n        sender: 'bot',\r\n        text: botResponse.data.message, // Get the response from the backend\r\n      };\r\n      setChatMessages(prevMessages => [...prevMessages, botMessage]); // Update chat messages state with the new bot message\r\n    } catch (error) {\r\n      console.error('Error sending message to bot:', error); // Log any error\r\n    }\r\n  };\r\n\r\n  // Function to handle showing the chat\r\n  const handleShowChat = () => {\r\n    setShowChat(true); // Set the chat visibility state to true\r\n\r\n    // Construct dynamic keys for `storia` and `training`\r\n    const storiaKey = `storia_${index}`; // Key for accessing the current story\r\n    const metaforaKey = `metafora_${index}`; // Key for accessing the current metaphor\r\n\r\n    // Get the initial message from the dictionary\r\n    const storiaMessage = dizionari.training_1[storiaKey] ? dizionari.training_1[storiaKey][0] : ''; // Get the story message\r\n    const metaforaMessage = dizionari.training_1[metaforaKey] ? dizionari.training_1[metaforaKey][0] : ''; // Get the metaphor message\r\n\r\n    // Construct the initial system message\r\n    const initialSystemMessage = `Leggi bene la storia. Dopodiché dimmi per la metafora \"${metaforaMessage}\" quali sono le proprietà che accomunano entrambi i concetti e li rendono simili.`; // Create the initial system message\r\n\r\n    // Set the initial message state\r\n    setInitialMessage(initialSystemMessage); // Set the initial message state\r\n\r\n    const systemMessage = {\r\n      sender: 'system',\r\n      text: initialSystemMessage,\r\n    };\r\n    setChatMessages(prevMessages => [...prevMessages, systemMessage]); // Add the system message to the chat messages state\r\n  };\r\n\r\n  // Effect to scroll to bottom of chat box on update\r\n  useEffect(() => {\r\n    const chatBox = document.getElementById('chat-box'); // Get the chat box element by ID\r\n    if (chatBox) {\r\n      chatBox.scrollTop = chatBox.scrollHeight; // Scroll to the bottom of the chat box\r\n    }\r\n  }, [chatMessages]); // Run this effect whenever chatMessages state updates\r\n\r\n  return (\r\n    <div>\r\n      <h1>This is Task1</h1>\r\n      <p>{dizionari.training_1[`storia_${index}`][0]}</p> {/* Display the story from dictionaries JSON */}\r\n\r\n      {!showChat && (\r\n        <button\r\n          style={{ padding: '5px 10px', cursor: 'pointer', marginBottom: '10px' }}\r\n          onClick={handleShowChat}\r\n        >\r\n          Ho letto\r\n        </button>\r\n      )}\r\n\r\n      {showChat && (\r\n        <div>\r\n          <div id=\"chat-box\" style={{ border: '1px solid #ccc', padding: '10px', minHeight: '200px', marginBottom: '10px', overflowY: 'auto' }}>\r\n            {chatMessages.map((message, index) => (\r\n              <div key={index} style={{ marginBottom: '5px', textAlign: message.sender === 'user' ? 'right' : 'left' }}>\r\n                {message.sender === 'user' ? (\r\n                  <span style={{ color: 'blue' }}>You:</span>\r\n                ) : message.sender === 'bot' ? (\r\n                  <span style={{ color: 'green' }}>Bot:</span>\r\n                ) : (\r\n                  <span style={{ color: 'black' }}>System:</span>\r\n                )}{' '}\r\n                {message.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div style={{ display: 'flex' }}>\r\n            <textarea\r\n              style={{ flex: '1', marginRight: '10px', padding: '5px' }}\r\n              placeholder=\"Type your message...\"\r\n              value={inputMessage} // Bind inputMessage state to textarea value\r\n              onChange={(e) => setInputMessage(e.target.value)} // Update inputMessage state on change\r\n              onKeyDown={(e) => {\r\n                if (e.key === 'Enter' && !e.shiftKey) {\r\n                  e.preventDefault(); // Prevent default Enter key behavior (new line)\r\n                  handleSendMessage(); // Call handleSendMessage function\r\n                }\r\n              }}\r\n            />\r\n            <button\r\n              style={{ padding: '5px 10px', cursor: 'pointer' }}\r\n              onClick={handleSendMessage} // Call handleSendMessage function on click\r\n            >\r\n              Send\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task1; // Export the Task1 component as the default export\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}